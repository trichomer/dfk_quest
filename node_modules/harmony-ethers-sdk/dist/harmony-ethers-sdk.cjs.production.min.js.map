{"version":3,"file":"harmony-ethers-sdk.cjs.production.min.js","sources":["../src/types.ts","../node_modules/regenerator-runtime/runtime.js","../src/address.ts","../src/transactions.ts","../src/formatter.ts","../src/provider.ts"],"sourcesContent":["import { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\r\nimport { TransactionRequest as EthTransactionRequest, TransactionReceipt as EthTransactionReceipt } from \"@ethersproject/abstract-provider\";\r\nimport { UnsignedTransaction as EthUnsignedTransaction, Transaction as EthTransaction } from \"@ethersproject/transactions\";\r\n\r\ninterface BlockBase {\r\n  hash: string;\r\n  parentHash: string;\r\n  number: number;\r\n\r\n  timestamp: number;\r\n  nonce: string;\r\n  difficulty: number;\r\n\r\n  gasLimit: BigNumber;\r\n  gasUsed: BigNumber;\r\n\r\n  miner: string;\r\n  extraData: string;\r\n\r\n  // Harmony\r\n\r\n  epoch: BigNumberish;\r\n  shardID: BigNumberish;\r\n  viewID: string;\r\n\r\n  transactions: Array<string | TransactionResponse>;\r\n  stakingTransactions: Array<string | TransactionResponse>;\r\n}\r\n\r\nexport interface Block extends BlockBase {\r\n  transactions: Array<string>;\r\n  stakingTransactions: Array<string>;\r\n  _difficulty: BigNumber;\r\n}\r\n\r\nexport interface BlockWithTransactions extends BlockBase {\r\n  transactions: Array<TransactionResponse>;\r\n  stakingTransactions: Array<TransactionResponse>;\r\n  _difficulty: BigNumber;\r\n}\r\n\r\nexport enum Directive {\r\n  CreateValidator,\r\n  EditValidator,\r\n  Delegate,\r\n  Undelegate,\r\n  CollectRewards,\r\n}\r\n\r\nexport interface Description {\r\n  name: string;\r\n  identity: string;\r\n  website: string;\r\n  securityContact: string;\r\n  details: string;\r\n}\r\n\r\nexport interface CommissionRate {\r\n  rate: string;\r\n  maxRate: string;\r\n  maxChangeRate: string;\r\n}\r\n\r\nexport interface CreateValidatorMsg {\r\n  validatorAddress: string;\r\n  description: Description;\r\n  commissionRates: CommissionRate;\r\n  minSelfDelegation: BigNumberish;\r\n  maxTotalDelegation: BigNumberish;\r\n  slotPubKeys: string[];\r\n  slotKeySigs?: string[];\r\n  amount: BigNumberish;\r\n}\r\n\r\nexport interface EditValidatorMsg {\r\n  validatorAddress: string;\r\n  description?: Partial<Description>;\r\n  commissionRate?: string;\r\n  minSelfDelegation?: BigNumberish;\r\n  maxTotalDelegation?: BigNumberish;\r\n  slotKeyToRemove?: string;\r\n  slotKeyToAdd?: string;\r\n  slotKeySig?: string;\r\n  active?: boolean;\r\n}\r\n\r\nexport interface DelegateMsg {\r\n  delegatorAddress: string;\r\n  validatorAddress: string;\r\n  amount: BigNumberish;\r\n}\r\n\r\nexport interface UndelegateMsg {\r\n  delegatorAddress: string;\r\n  validatorAddress: string;\r\n  amount: BigNumberish;\r\n}\r\n\r\nexport interface CollectRewardsMsg {\r\n  delegatorAddress: string;\r\n}\r\n\r\nexport type Msg = CommissionRate | CreateValidatorMsg | EditValidatorMsg | DelegateMsg | UndelegateMsg | CollectRewardsMsg;\r\n\r\nexport interface UnsignedTransaction extends Omit<EthUnsignedTransaction, \"accessList\" | \"type\"> {\r\n  shardID?: number;\r\n  toShardID?: number;\r\n}\r\n\r\nexport interface UnsignedStakingTransaction extends Omit<EthUnsignedTransaction, \"accessList\" | \"type\"> {\r\n  type: Directive;\r\n  msg: Msg;\r\n}\r\n\r\nexport interface Transaction extends Omit<EthTransaction, \"accessList\" | \"type\"> {\r\n  shardID: BigNumberish;\r\n  toShardID: BigNumberish;\r\n}\r\n\r\nexport interface StakingTransaction extends Omit<EthTransaction, \"accessList\" | \"type\" | \"data\" | \"value\" | \"to\"> {\r\n  type: Directive;\r\n  msg: Msg | null;\r\n}\r\n\r\ninterface Response {\r\n  blockNumber?: number;\r\n  blockHash?: string;\r\n  timestamp?: number;\r\n\r\n  confirmations: number;\r\n}\r\n\r\nexport interface TransactionResponse extends Transaction, Response {\r\n  hash: string;\r\n\r\n  // Not optional (as it is in Transaction)\r\n  from: string;\r\n\r\n  // The raw transaction\r\n  raw?: string;\r\n\r\n  shardID: number;\r\n  toShardID: number;\r\n\r\n  // This function waits until the transaction has been mined\r\n  wait: (confirmations?: number) => Promise<TransactionReceipt>;\r\n}\r\n\r\nexport interface StakingTransactionResponse extends Transaction, Response {\r\n  hash: string;\r\n\r\n  type: Directive;\r\n  msg: Msg;\r\n\r\n  // Not optional (as it is in Transaction)\r\n  from: string;\r\n\r\n  // // The raw transaction\r\n  // raw?: string;\r\n\r\n  // wait: (confirmations?: number) => Promise<StakingTransactionReceipt>;\r\n}\r\n\r\nexport interface TransactionRequest extends Omit<EthTransactionRequest, \"accessList\" | \"type\"> {\r\n  shardID?: number;\r\n  toShardID?: number;\r\n}\r\n\r\nexport interface StakingTransactionRequest {\r\n  type: Directive;\r\n  msg: Msg;\r\n\r\n  nonce?: number;\r\n  gasLimit?: BigNumberish;\r\n  gasPrice?: BigNumberish;\r\n  chainId?: number;\r\n}\r\n\r\nexport interface TransactionReceipt extends EthTransactionReceipt {}\r\n\r\nexport interface CXTransactionReceipt {\r\n  blockHash: string;\r\n  blockNumber: number;\r\n  transactionHash: string;\r\n  to: string;\r\n  from: string;\r\n  shardID: number;\r\n  toShardID: number;\r\n  value: BigNumberish;\r\n}\r\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import { isAddress, getAddress as getHexAddress } from \"@ethersproject/address\";\r\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\r\nimport { bech32 } from \"bech32\";\r\n\r\n// HRP is the human-readable part of Harmony bech32 addresses\r\nexport const HRP = \"one\";\r\nexport const tHRP = \"tone\";\r\n\r\nexport const isBech32Address = (raw: string): boolean => {\r\n  return !!raw.match(/^one1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}/);\r\n};\r\n\r\nexport const isBech32TestNetAddress = (raw: string): boolean => {\r\n  return !!raw.match(/^tone1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}/);\r\n};\r\n\r\nexport class HarmonyAddress {\r\n  static isValidBasic(str: string) {\r\n    const toTest = new HarmonyAddress(str);\r\n    return toTest.raw === toTest.basic;\r\n  }\r\n\r\n  static isValidChecksum(str: string) {\r\n    const toTest = new HarmonyAddress(str);\r\n    return toTest.raw === toTest.checksum;\r\n  }\r\n\r\n  static isValidBech32(str: string) {\r\n    const toTest = new HarmonyAddress(str);\r\n    return toTest.raw === toTest.bech32;\r\n  }\r\n\r\n  static isValidBech32TestNet(str: string) {\r\n    const toTest = new HarmonyAddress(str);\r\n    return toTest.raw === toTest.bech32TestNet;\r\n  }\r\n\r\n  raw: string;\r\n  basic: string;\r\n\r\n  get basicHex() {\r\n    return hexlify(this.basic);\r\n  }\r\n\r\n  get checksum() {\r\n    return getHexAddress(this.basic);\r\n  }\r\n\r\n  get bech32() {\r\n    return bech32.encode(HRP, bech32.toWords(arrayify(this.basic)));\r\n  }\r\n\r\n  get bech32TestNet() {\r\n    return bech32.encode(tHRP, bech32.toWords(arrayify(this.basic)));\r\n  }\r\n\r\n  constructor(raw: string) {\r\n    this.raw = raw;\r\n    this.basic = this.getBasic(this.raw);\r\n  }\r\n\r\n  private getBasic(addr: string) {\r\n    if (isAddress(addr)) {\r\n      return getHexAddress(addr).substring(2);\r\n    }\r\n\r\n    if (isBech32Address(addr) || isBech32TestNetAddress(addr)) {\r\n      const { prefix, words } = bech32.decode(addr);\r\n      if (prefix === HRP || prefix === tHRP) {\r\n        return getHexAddress(hexlify(bech32.fromWords(words))).substring(2);\r\n      }\r\n    }\r\n\r\n    throw new Error(`\"${addr}\" is an invalid address format`);\r\n  }\r\n}\r\n\r\nexport function getAddress(address: string) {\r\n  try {\r\n    return new HarmonyAddress(address);\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n","import {\r\n  arrayify,\r\n  BytesLike,\r\n  SignatureLike,\r\n  splitSignature,\r\n  stripZeros,\r\n  hexlify,\r\n  hexZeroPad,\r\n  isBytesLike,\r\n  DataOptions,\r\n} from \"@ethersproject/bytes\";\r\nimport { parseUnits } from \"@ethersproject/units\";\r\nimport { keccak256 } from \"@ethersproject/keccak256\";\r\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\r\nimport { recoverAddress } from \"@ethersproject/transactions\";\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport * as RLP from \"@ethersproject/rlp\";\r\nimport { Zero, One, Two } from \"@ethersproject/constants\";\r\nimport { checkProperties } from \"@ethersproject/properties\";\r\nimport { getAddress } from \"./address\";\r\nimport {\r\n  CollectRewardsMsg,\r\n  CommissionRate,\r\n  CreateValidatorMsg,\r\n  DelegateMsg,\r\n  Description,\r\n  Directive,\r\n  EditValidatorMsg,\r\n  Msg,\r\n  UndelegateMsg,\r\n  Transaction,\r\n  StakingTransaction,\r\n  UnsignedTransaction,\r\n  UnsignedStakingTransaction,\r\n} from \"./types\";\r\nconst logger = new Logger(\"hmy_transaction/0.0.1\");\r\n\r\nconst transactionFields = [\r\n  { name: \"nonce\", maxLength: 32, numeric: true },\r\n  { name: \"gasPrice\", maxLength: 32, numeric: true },\r\n  { name: \"gasLimit\", maxLength: 32, numeric: true },\r\n  { name: \"shardID\", maxLength: 16, numeric: true },\r\n  { name: \"toShardID\", maxLength: 16, numeric: true },\r\n  { name: \"to\", length: 20 },\r\n  { name: \"value\", maxLength: 32, numeric: true },\r\n  { name: \"data\" },\r\n];\r\n\r\nconst allowedTransactionKeys: { [key: string]: boolean } = {\r\n  nonce: true,\r\n  gasLimit: true,\r\n  gasPrice: true,\r\n  shardID: true,\r\n  toShardID: true,\r\n  to: true,\r\n  value: true,\r\n  data: true,\r\n  chainId: true,\r\n};\r\n\r\nfunction formatNumber(value: BigNumberish, name: string): Uint8Array {\r\n  const result = stripZeros(BigNumber.from(value).toHexString());\r\n  if (result.length > 32) {\r\n    logger.throwArgumentError(\"invalid length for \" + name, \"transaction:\" + name, value);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction formatDecimal(value: BigNumberish | string): Array<string> {\r\n  if (typeof value === \"string\") {\r\n    return [parseUnits(<string>value, 18).toHexString()];\r\n  }\r\n\r\n  return [BigNumber.from(value).toHexString()];\r\n}\r\n\r\nfunction formatDescription(value: Partial<Description>): Array<Uint8Array> {\r\n  return [\r\n    new Uint8Array(Buffer.from(value.name ?? \"\")),\r\n    new Uint8Array(Buffer.from(value.identity ?? \"\")),\r\n    new Uint8Array(Buffer.from(value.website ?? \"\")),\r\n    new Uint8Array(Buffer.from(value.securityContact ?? \"\")),\r\n    new Uint8Array(Buffer.from(value.details ?? \"\")),\r\n  ];\r\n}\r\n\r\nfunction formatComissionRates(value: CommissionRate): Array<Array<string>> {\r\n  return [formatDecimal(value.rate), formatDecimal(value.maxRate), formatDecimal(value.maxChangeRate)];\r\n}\r\n\r\nfunction formatMsg(type: Directive, value: Msg): any {\r\n  switch (type) {\r\n    case Directive.CreateValidator: {\r\n      const msg = value as CreateValidatorMsg;\r\n      return [\r\n        getAddress(msg.validatorAddress).checksum,\r\n        formatDescription(msg.description),\r\n        formatComissionRates(msg.commissionRates),\r\n        formatNumber(msg.minSelfDelegation, \"minSelfDelegation\"),\r\n        formatNumber(msg.maxTotalDelegation, \"maxTotalDelegation\"),\r\n        msg.slotPubKeys.map((key) => arrayify(key)),\r\n        msg.slotKeySigs?.map((sig) => arrayify(sig)),\r\n        formatNumber(msg.amount, \"amount\"),\r\n      ];\r\n    }\r\n    case Directive.EditValidator: {\r\n      const msg = value as EditValidatorMsg;\r\n      return [\r\n        getAddress(msg.validatorAddress).checksum,\r\n        msg.description ? formatDescription(msg.description) : [],\r\n        msg.commissionRate ? formatDecimal(msg.commissionRate) : \"0x\",\r\n        msg.minSelfDelegation ? formatNumber(msg.minSelfDelegation, \"minSelfDelegation\") : \"0x\",\r\n        msg.maxTotalDelegation ? formatNumber(msg.maxTotalDelegation, \"maxTotalDelegation\") : \"0x\",\r\n        msg.slotKeyToRemove ? hexlify(msg.slotKeyToRemove) : \"0x\",\r\n        msg.slotKeyToAdd ? hexlify(msg.slotKeyToAdd) : \"0x\",\r\n        msg.slotKeySig ? hexlify(msg.slotKeySig) : \"0x\",\r\n        msg.active != null ? (msg.active ? One.toHexString() : Two.toHexString()) : Zero.toHexString(),\r\n      ];\r\n    }\r\n    case Directive.Delegate:\r\n    case Directive.Undelegate: {\r\n      const msg = value as DelegateMsg | UndelegateMsg;\r\n      return [getAddress(msg.delegatorAddress).checksum, getAddress(msg.validatorAddress).checksum, formatNumber(msg.amount, \"amount\")];\r\n    }\r\n    case Directive.CollectRewards: {\r\n      const msg = value as CollectRewardsMsg;\r\n      return [getAddress(msg.delegatorAddress).checksum];\r\n    }\r\n    default:\r\n      logger.throwArgumentError(\"invalid type\", \"type\", hexlify(type));\r\n  }\r\n}\r\n\r\nexport function serialize(transaction: UnsignedStakingTransaction | UnsignedTransaction, signature?: SignatureLike): string {\r\n  if (\"type\" in transaction) {\r\n    return serializeStakingTransaction(transaction, signature);\r\n  }\r\n\r\n  return serializeTransaction(transaction, signature);\r\n}\r\n\r\nfunction serializeTransaction(transaction: UnsignedTransaction, signature?: SignatureLike): string {\r\n  checkProperties(transaction, allowedTransactionKeys);\r\n\r\n  const fields: Array<string | Uint8Array> = [];\r\n\r\n  transactionFields.forEach(function (fieldInfo) {\r\n    let value = (<any>transaction)?.[fieldInfo.name] ?? [];\r\n    const options: DataOptions = {};\r\n\r\n    if (fieldInfo.numeric) {\r\n      options.hexPad = \"left\";\r\n    }\r\n\r\n    value = arrayify(hexlify(value, options));\r\n\r\n    // Fixed-width field\r\n    if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\r\n      logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\r\n    }\r\n\r\n    // Variable-width (with a maximum)\r\n    if (fieldInfo.maxLength) {\r\n      value = stripZeros(value);\r\n      if (value.length > fieldInfo.maxLength) {\r\n        logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\r\n      }\r\n    }\r\n\r\n    fields.push(hexlify(value));\r\n  });\r\n\r\n  return encodeTransaction(transaction, fields, signature);\r\n}\r\n\r\nexport function serializeStakingTransaction(transaction: UnsignedStakingTransaction, signature?: SignatureLike): string {\r\n  const fields: any = [\r\n    transaction.type === 0 ? \"0x\" : BigNumber.from(transaction.type).toHexString(),\r\n    formatMsg(transaction.type, transaction.msg),\r\n    formatNumber(transaction.nonce || 0, \"nonce\"),\r\n    formatNumber(transaction.gasPrice || 0, \"gasPrice\"),\r\n    formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\r\n  ];\r\n\r\n  return encodeTransaction(transaction, fields, signature);\r\n}\r\n\r\nfunction encodeTransaction(transaction: UnsignedTransaction, fields: Array<string | Uint8Array>, signature?: SignatureLike): string {\r\n  let chainId = 1;\r\n  if (transaction.chainId != null) {\r\n    // A chainId was provided; if non-zero we'll use EIP-155\r\n    chainId = transaction.chainId;\r\n\r\n    if (typeof chainId !== \"number\") {\r\n      logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\r\n    }\r\n  } else if (signature && !isBytesLike(signature) && signature.v && signature.v > 28 ) {\r\n    // No chainId provided, but the signature is signing with EIP-155; derive chainId\r\n    chainId = Math.floor((signature.v - 35) / 2);\r\n  }\r\n\r\n  fields.push(hexlify(chainId)); // @TODO: hexValue?\r\n  fields.push(\"0x\");\r\n  fields.push(\"0x\");\r\n\r\n  // Requesting an unsigned transation\r\n  if (!signature) {\r\n    return RLP.encode(fields);\r\n  }\r\n\r\n  const sig = splitSignature(signature);\r\n  let v = 27 + (sig.recoveryParam || 0);\r\n  fields.pop();\r\n  fields.pop();\r\n  fields.pop();\r\n  v += chainId * 2 + 8;\r\n\r\n  fields.push(hexlify(v));\r\n  fields.push(stripZeros(arrayify(sig.r) || []));\r\n  fields.push(stripZeros(arrayify(sig.s) || []));\r\n\r\n  return RLP.encode(fields);\r\n}\r\n\r\nfunction handleAddress(value: string): string {\r\n  if (value === \"0x\") {\r\n    return '';\r\n  }\r\n  return getAddress(value).checksum;\r\n}\r\n\r\nfunction handleNumber(value: string): BigNumber {\r\n  if (value === \"0x\") {\r\n    return Zero;\r\n  }\r\n  return BigNumber.from(value);\r\n}\r\n\r\nfunction handleDecimal(value: string): string {\r\n  return value;\r\n}\r\n\r\nfunction handleText(value: string): string {\r\n  return Buffer.from(arrayify(value)).toString();\r\n}\r\n\r\nfunction handleValidatorDescription(value: Array<string>): Description {\r\n  return {\r\n    name: handleText(value[0]),\r\n    identity: handleText(value[1]),\r\n    website: handleText(value[2]),\r\n    securityContact: handleText(value[3]),\r\n    details: handleText(value[4]),\r\n  };\r\n}\r\n\r\nfunction handleValidatorCommissionRates(value: Array<string>): CommissionRate {\r\n  return {\r\n    rate: handleDecimal(value[0]),\r\n    maxRate: handleDecimal(value[1]),\r\n    maxChangeRate: handleDecimal(value[2]),\r\n  };\r\n}\r\n\r\nfunction handleActive(value: string): boolean | null {\r\n  const status = BigNumber.from(value);\r\n\r\n  if (status.eq(Zero)) {\r\n    return null;\r\n  }\r\n\r\n  if (status.eq(One)) {\r\n    return true;\r\n  }\r\n\r\n  if (status.eq(Two)) {\r\n    return false;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction handleMsg(type: Directive, value: Array<string | Array<string>>): Msg | null {\r\n  switch (type) {\r\n    case Directive.CreateValidator:\r\n      return {\r\n        validatorAddress: handleAddress(<string>value[0]),\r\n        description: handleValidatorDescription(<Array<string>>value[1]),\r\n        commissionRates: handleValidatorCommissionRates(<Array<string>>value[2]),\r\n        minSelfDelegation: handleNumber(<string>value[3]),\r\n        maxTotalDelegation: handleNumber(<string>value[4]),\r\n        slotPubKeys: value[5],\r\n        slotKeySigs: value[6],\r\n        amount: handleNumber(<string>value[7]),\r\n      } as CreateValidatorMsg;\r\n    case Directive.EditValidator:\r\n      return {\r\n        validatorAddress: handleAddress(<string>value[0]),\r\n        description: handleValidatorDescription(<Array<string>>value[1]),\r\n        commissionRate: handleDecimal(<string>value[2]),\r\n        minSelfDelegation: handleNumber(<string>value[3]),\r\n        maxTotalDelegation: handleNumber(<string>value[4]),\r\n        slotKeyToRemove: value[5],\r\n        slotKeyToAdd: value[6],\r\n        slotKeySig: value[7],\r\n        active: handleActive(<string>value[8]),\r\n      } as EditValidatorMsg;\r\n    case Directive.Undelegate:\r\n    case Directive.Delegate:\r\n      return {\r\n        delegatorAddress: handleAddress(<string>value[0]),\r\n        validatorAddress: handleAddress(<string>value[1]),\r\n        amount: handleNumber(<string>value[2]),\r\n      } as DelegateMsg | UndelegateMsg;\r\n    case Directive.CollectRewards:\r\n      return {\r\n        delegatorAddress: handleAddress(<string>value[0]),\r\n      } as CollectRewardsMsg;\r\n    default:\r\n      logger.throwArgumentError(\"invalid type\", \"type\", hexlify(type));\r\n      return null;\r\n  }\r\n}\r\n\r\nfunction handleStakingTransaction(transaction: any): StakingTransaction {\r\n  if (transaction.length !== 5 && transaction.length !== 8) {\r\n    logger.throwArgumentError(\"invalid component count for staking transaction\", \"payload\", \"\");\r\n  }\r\n\r\n  const directive: Directive = transaction[0] === \"0x\" ? 0 : handleNumber(transaction[0]).toNumber();\r\n\r\n  const tx: StakingTransaction = {\r\n    type: directive,\r\n    msg: handleMsg(directive, transaction[1]),\r\n    nonce: handleNumber(transaction[2]).toNumber(),\r\n    gasPrice: handleNumber(transaction[3]),\r\n    gasLimit: handleNumber(transaction[4]),\r\n    chainId: 1,\r\n  };\r\n\r\n  // Unsigned Transaction\r\n  if (transaction.length === 5) {\r\n    return tx;\r\n  }\r\n\r\n  try {\r\n    tx.v = BigNumber.from(transaction[5]).toNumber();\r\n  } catch (error) {\r\n    return tx;\r\n  }\r\n\r\n  tx.r = hexZeroPad(transaction[6], 32);\r\n  tx.s = hexZeroPad(transaction[7], 32);\r\n\r\n  if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {\r\n    // EIP-155 unsigned transaction\r\n    tx.chainId = tx.v;\r\n    tx.v = 0;\r\n  } else {\r\n    // Signed Tranasaction\r\n\r\n    tx.chainId = Math.floor((tx.v - 35) / 2);\r\n\r\n    let recoveryParam = tx.v - 27;\r\n\r\n    const raw = transaction.slice(0, 5);\r\n\r\n    raw.push(hexlify(tx.chainId));\r\n    raw.push(\"0x\");\r\n    raw.push(\"0x\");\r\n    recoveryParam -= tx.chainId * 2 + 8;\r\n\r\n    const digest = keccak256(RLP.encode(raw));\r\n    try {\r\n      tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam: recoveryParam });\r\n    } catch (error) {}\r\n\r\n    tx.hash = keccak256(RLP.encode(transaction));\r\n  }\r\n\r\n  return tx;\r\n}\r\n\r\nfunction handleTransaction(transaction: any): Transaction {\r\n  if (transaction.length !== 11 && transaction.length !== 8) {\r\n    logger.throwArgumentError(\"invalid raw transaction\", \"transaction\", \"\");\r\n  }\r\n\r\n  const tx: Transaction = {\r\n    nonce: handleNumber(transaction[0]).toNumber(),\r\n    gasPrice: handleNumber(transaction[1]),\r\n    gasLimit: handleNumber(transaction[2]),\r\n    shardID: handleNumber(transaction[3]),\r\n    toShardID: handleNumber(transaction[4]),\r\n    to: handleAddress(transaction[5]),\r\n    value: handleNumber(transaction[6]),\r\n    data: transaction[7],\r\n    chainId: 1,\r\n  };\r\n\r\n  // Legacy unsigned transaction\r\n  if (transaction.length === 8) {\r\n    return tx;\r\n  }\r\n\r\n  try {\r\n    tx.v = BigNumber.from(transaction[8]).toNumber();\r\n  } catch (error) {\r\n    return tx;\r\n  }\r\n\r\n  tx.r = hexZeroPad(transaction[9], 32);\r\n  tx.s = hexZeroPad(transaction[10], 32);\r\n\r\n  if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {\r\n    // EIP-155 unsigned transaction\r\n    tx.chainId = tx.v;\r\n    tx.v = 0;\r\n  } else {\r\n    // Signed Tranasaction\r\n\r\n    tx.chainId = Math.floor((tx.v - 35) / 2);\r\n\r\n    let recoveryParam = tx.v - 27;\r\n\r\n    const raw = transaction.slice(0, 8);\r\n\r\n    raw.push(hexlify(tx.chainId));\r\n    raw.push(\"0x\");\r\n    raw.push(\"0x\");\r\n    recoveryParam -= tx.chainId * 2 + 8;\r\n\r\n    const digest = keccak256(RLP.encode(raw));\r\n    try {\r\n      tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam: recoveryParam });\r\n    } catch (error) {}\r\n\r\n    tx.hash = keccak256(RLP.encode(transaction));\r\n  }\r\n\r\n  return tx;\r\n}\r\n\r\nexport function parseTransaction(payload: BytesLike): Transaction {\r\n  return handleTransaction(RLP.decode(arrayify(payload)));\r\n}\r\n\r\nexport function parseStakingTransaction(payload: BytesLike): StakingTransaction {\r\n  return handleStakingTransaction(RLP.decode(arrayify(payload)));\r\n}\r\n\r\nexport function parse(rawTransaction: BytesLike): StakingTransaction | Transaction {\r\n  const payload = arrayify(rawTransaction);\r\n  const transaction = RLP.decode(payload);\r\n\r\n  if (Array.isArray(transaction[1])) {\r\n    return handleStakingTransaction(transaction);\r\n  }\r\n\r\n  return handleTransaction(transaction);\r\n}\r\n","import { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { Formatter, TransactionReceipt } from \"@ethersproject/providers\";\r\nimport { parseUnits, formatUnits } from \"@ethersproject/units\";\r\nimport { Formats as BaseFormats, FormatFuncs } from \"@ethersproject/providers/lib/formatter\";\r\nimport { shallowCopy } from \"@ethersproject/properties\";\r\nimport { getAddress } from \"./address\";\r\nimport {\r\n  Transaction,\r\n  Msg,\r\n  Directive,\r\n  TransactionResponse,\r\n  StakingTransactionResponse,\r\n  CXTransactionReceipt,\r\n  StakingTransaction,\r\n  Block,\r\n} from \"./types\";\r\nimport { parseTransaction, parseStakingTransaction } from \"./transactions\";\r\n\r\ntype HarmonyFormats = {\r\n  stakingTransaction: FormatFuncs;\r\n\r\n  cXReceipt: FormatFuncs;\r\n\r\n  description: FormatFuncs;\r\n  commissionRate: FormatFuncs;\r\n\r\n  createValidatorMsg: FormatFuncs;\r\n  createValidatorRequestMsg: FormatFuncs;\r\n\r\n  editValidatorMsg: FormatFuncs;\r\n  editValidatorRequestMsg: FormatFuncs;\r\n\r\n  delegateMsg: FormatFuncs;\r\n  undelegateMsg: FormatFuncs;\r\n  collectRewardsMsg: FormatFuncs;\r\n\r\n  delegation: FormatFuncs;\r\n  undelegation: FormatFuncs;\r\n};\r\n\r\nexport interface Delegation {\r\n  validatorAddress: string;\r\n  delegatorAddress: string;\r\n  amount: number;\r\n  reward: number;\r\n  undelegations: {\r\n    amount: number;\r\n    reward: number;\r\n  }[];\r\n}\r\n\r\ntype Formats = BaseFormats & HarmonyFormats;\r\ninterface ExtendKeys {\r\n  [key: string]: number;\r\n}\r\ninterface TransactionTypes extends ExtendKeys {\r\n  CreateValidator: number,\r\n  EditValidator: number,\r\n  Delegate: number,\r\n  Undelegate: number,\r\n  CollectRewards: number,\r\n}\r\nconst TRANSACTION_TYPES: TransactionTypes = {\r\n  CreateValidator: 0,\r\n  EditValidator: 1,\r\n  Delegate: 2,\r\n  Undelegate: 3,\r\n  CollectRewards: 4,\r\n};\r\n\r\nexport default class HarmonyFormatter extends Formatter {\r\n  formats!: Formats;\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  getDefaultFormats(): Formats {\r\n    const number = this.number.bind(this);\r\n    const address = this.address.bind(this);\r\n    const data = this.data.bind(this);\r\n    const hash = this.hash.bind(this);\r\n    const bigNumber = this.bigNumber.bind(this);\r\n    const decimal = this.decimal.bind(this);\r\n    const transactionType = this.transactionType.bind(this);\r\n\r\n    const value = (v: string) => v; // todo\r\n\r\n    const formats = super.getDefaultFormats() as Formats;\r\n\r\n    delete formats.transaction.type;\r\n    delete formats.transaction.accessList;\r\n    delete formats.transactionRequest.type;\r\n    delete formats.transactionRequest.accessList;\r\n\r\n    formats.transaction.shardID = number;\r\n    formats.transaction.toShardID = Formatter.allowNull(number);\r\n\r\n    formats.receipt.type = Formatter.allowNull(transactionType);\r\n\r\n    Object.assign(formats.block, {\r\n      nonce: number,\r\n      epoch: bigNumber,\r\n      viewID: number,\r\n      mixHash: hash,\r\n      stakingTransactions: Formatter.allowNull(Formatter.arrayOf(hash)),\r\n    });\r\n\r\n    formats.stakingTransaction = {\r\n      hash: hash,\r\n\r\n      type: transactionType,\r\n\r\n      blockHash: Formatter.allowNull(hash, null),\r\n      blockNumber: Formatter.allowNull(number, null),\r\n      transactionIndex: Formatter.allowNull(number, null),\r\n\r\n      confirmations: Formatter.allowNull(number, null),\r\n\r\n      gasPrice: bigNumber,\r\n      gasLimit: bigNumber,\r\n      nonce: number,\r\n\r\n      r: Formatter.allowNull(this.uint256.bind(this)),\r\n      s: Formatter.allowNull(this.uint256.bind(this)),\r\n      v: Formatter.allowNull(number),\r\n\r\n      raw: Formatter.allowNull(data),\r\n    };\r\n\r\n    Object.assign(formats.blockWithTransactions, {\r\n      nonce: number,\r\n      epoch: bigNumber,\r\n      viewID: number,\r\n      mixHash: hash,\r\n      stakingTransactions: Formatter.allowNull(Formatter.arrayOf(this.stakingTransactionResponse.bind(this))),\r\n    });\r\n\r\n    formats.cXReceipt = {\r\n      blockHash: hash,\r\n      blockNumber: number,\r\n      to: address,\r\n      from: address,\r\n      shardID: number,\r\n      toShardID: number,\r\n      value: bigNumber,\r\n      // confirmations: Formatter.allowNull(number, null),\r\n    };\r\n\r\n    // msgs formats\r\n\r\n    formats.description = {\r\n      name: value,\r\n      identity: value,\r\n      website: value,\r\n      securityContact: value,\r\n      details: value,\r\n    };\r\n\r\n    formats.commissionRate = {\r\n      rate: decimal,\r\n      maxRate: decimal,\r\n      maxChangeRate: decimal,\r\n    };\r\n\r\n    formats.createValidatorMsg = {\r\n      validatorAddress: address,\r\n      amount: bigNumber,\r\n      minSelfDelegation: bigNumber,\r\n      maxTotalDelegation: bigNumber,\r\n      slotPubKeys: Formatter.arrayOf(value),\r\n    };\r\n\r\n    formats.createValidatorRequestMsg = shallowCopy(formats.createValidatorMsg);\r\n    formats.createValidatorRequestMsg.slotKeySigs = Formatter.arrayOf(value);\r\n\r\n    formats.editValidatorMsg = {\r\n      validatorAddress: address,\r\n      commissionRate: Formatter.allowNull(decimal, \"0x0\"),\r\n      minSelfDelegation: Formatter.allowNull(bigNumber, \"0x0\"),\r\n      maxTotalDelegation: Formatter.allowNull(bigNumber, \"0x0\"),\r\n      slotPubKeyToAdd: Formatter.allowNull(value, null),\r\n      slotPubKeyToRemove: Formatter.allowNull(value, null),\r\n    };\r\n\r\n    formats.editValidatorRequestMsg = shallowCopy(formats.editValidatorMsg);\r\n    formats.editValidatorRequestMsg.slotKeySigs = Formatter.allowNull(Formatter.arrayOf(value), []);\r\n    formats.editValidatorRequestMsg.active = Formatter.allowNull((value) => value, null);\r\n\r\n    formats.delegateMsg = {\r\n      delegatorAddress: address,\r\n      validatorAddress: address,\r\n      amount: bigNumber,\r\n    };\r\n\r\n    formats.undelegateMsg = {\r\n      delegatorAddress: address,\r\n      validatorAddress: address,\r\n      amount: bigNumber,\r\n    };\r\n\r\n    formats.collectRewardsMsg = {\r\n      delegatorAddress: address,\r\n    };\r\n\r\n    formats.undelegation = {\r\n      amount: value,\r\n      epoch: number,\r\n    };\r\n\r\n    formats.delegation = {\r\n      delegatorAddress: address,\r\n      validatorAddress: address,\r\n      amount: value,\r\n      reward: value,\r\n      undelegations: Formatter.allowNull(\r\n        Formatter.arrayOf((undelegation) =>\r\n          Formatter.check(formats.undelegation, {\r\n            amount: undelegation.Amount,\r\n            epoch: undelegation.Epoch,\r\n          })\r\n        ),\r\n        []\r\n      ),\r\n    };\r\n\r\n    return formats;\r\n  }\r\n\r\n  decimal(value: any): BigNumber | null {\r\n    if (value === \"0x0\") {\r\n      return null;\r\n    }\r\n    return parseUnits(value, 18);\r\n  }\r\n\r\n  transaction(value: any): Transaction {\r\n    return parseTransaction(value);\r\n  }\r\n\r\n  stakingTransaction(value: any): StakingTransaction {\r\n    return parseStakingTransaction(value);\r\n  }\r\n\r\n  transactionType(value: any): Directive {\r\n    let type = value;\r\n    if (typeof value === \"string\") {\r\n      type = TRANSACTION_TYPES[value];\r\n    }\r\n\r\n    // throw on invalid type ?\r\n\r\n    return this.number(type);\r\n  }\r\n\r\n  msg(type: any, value: any): Msg {\r\n    switch (type) {\r\n      case Directive.CreateValidator: {\r\n        let msg = Formatter.check(this.formats.createValidatorMsg, value);\r\n        msg.commissionRates = Formatter.check(this.formats.commissionRate, {\r\n          rate: formatUnits(BigNumber.from(value.commissionRate), 18),\r\n          maxRate: formatUnits(BigNumber.from(value.maxCommissionRate), 18),\r\n          maxChangeRate: formatUnits(BigNumber.from(value.maxChangeRate), 18),\r\n        });\r\n        msg.description = Formatter.check(this.formats.description, value);\r\n        return msg;\r\n      }\r\n      case Directive.EditValidator: {\r\n        let msg = Formatter.check(this.formats.editValidatorMsg, value);\r\n        msg.description = Formatter.check(this.formats.description, value);\r\n        return msg;\r\n      }\r\n      case Directive.Delegate:\r\n        return Formatter.check(this.formats.delegateMsg, value);\r\n      case Directive.Undelegate:\r\n        return Formatter.check(this.formats.undelegateMsg, value);\r\n      case Directive.CollectRewards:\r\n        return Formatter.check(this.formats.collectRewardsMsg, value);\r\n      default:\r\n        throw new Error(\"Invalid msg type\");\r\n    }\r\n  }\r\n\r\n  address(value: any): string {\r\n    return getAddress(value).checksum;\r\n  }\r\n\r\n  _block(value: any, format: any): Block {\r\n    return super._block(value, format) as Block;\r\n  }\r\n\r\n  block(value: any): Block {\r\n    return this._block(value, this.formats.block);\r\n  }\r\n\r\n  blockWithTransactions(value: any): Block {\r\n    return this._block(value, this.formats.blockWithTransactions);\r\n  }\r\n\r\n  transactionResponse(transaction: any): TransactionResponse {\r\n    // Rename gas to gasLimit\r\n    if (transaction.gas != null && transaction.gasLimit == null) {\r\n      transaction.gasLimit = transaction.gas;\r\n    }\r\n\r\n    // Rename input to data\r\n    if (transaction.input != null && transaction.data == null) {\r\n      transaction.data = transaction.input;\r\n    }\r\n\r\n    // If to and creates are empty, populate the creates from the transaction\r\n    if (transaction.to == null && transaction.creates == null) {\r\n      transaction.creates = this.contractAddress(transaction);\r\n    }\r\n\r\n    const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\r\n\r\n    // 0x0000... should actually be empty STRING\r\n    if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\r\n      result.blockHash = '';\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  stakingTransactionResponse(transaction: any): StakingTransactionResponse {\r\n    if (transaction.gas != null && transaction.gasLimit == null) {\r\n      transaction.gasLimit = transaction.gas;\r\n    }\r\n\r\n    const result: StakingTransactionResponse = Formatter.check(this.formats.stakingTransaction, transaction);\r\n    result.msg = this.msg(result.type, transaction.msg);\r\n    return result;\r\n  }\r\n\r\n  receipt(value: any): TransactionReceipt {\r\n    if (value.type != null) {\r\n      value.from = value.sender;\r\n    }\r\n\r\n    const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\r\n    return result;\r\n  }\r\n\r\n  cXReceipt(value: any): CXTransactionReceipt {\r\n    return Formatter.check(this.formats.cXReceipt, value);\r\n  }\r\n\r\n  delegation(value: any): Delegation {\r\n    return Formatter.check(this.formats.delegation, {\r\n      validatorAddress: value.validator_address,\r\n      delegatorAddress: value.delegator_address,\r\n      amount: value.amount,\r\n      reward: value.reward,\r\n      undelegations: value.Undelegations,\r\n    });\r\n  }\r\n}\r\n","import { BlockTag, BaseProvider, JsonRpcProvider } from \"@ethersproject/providers\";\r\nimport { getStatic } from \"@ethersproject/properties\";\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { hexlify } from \"@ethersproject/bytes\";\r\nimport { randomBytes } from \"crypto\";\r\nimport { Deferrable } from \"@ethersproject/properties\";\r\nimport { Network } from \"@ethersproject/networks\";\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { parseEther } from \"@ethersproject/units\";\r\nimport { ConnectionInfo, poll } from \"@ethersproject/web\";\r\nimport {\r\n  TransactionRequest,\r\n  Transaction,\r\n  TransactionResponse,\r\n  TransactionReceipt,\r\n  CXTransactionReceipt,\r\n  StakingTransactionResponse,\r\n  StakingTransaction,\r\n  Block,\r\n  BlockWithTransactions,\r\n} from \"./types\";\r\nimport HarmonyFormatter, { Delegation } from \"./formatter\";\r\nconst logger = new Logger(\"hmy_provider/0.0.1\");\r\n\r\nfunction timer(timeout: number): Promise<any> {\r\n  return new Promise(function (resolve) {\r\n    setTimeout(resolve, timeout);\r\n  });\r\n}\r\n\r\nexport interface HarmonyProvider extends BaseProvider {\r\n  network: HarmonyNetwork;\r\n\r\n  // Execution\r\n  sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse>;\r\n  sendStakingTransaction(signedTransaction: string | Promise<string>): Promise<StakingTransactionResponse>;\r\n\r\n  call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>;\r\n  estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber>;\r\n\r\n  // Queries\r\n  getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block>;\r\n  getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions>;\r\n\r\n  getTransaction(transactionHash: string): Promise<TransactionResponse>;\r\n  getTransactionReceipt(transactionHash: string): Promise<TransactionReceipt>;\r\n  getCXTransactionReceipt(transactionHash: string): Promise<CXTransactionReceipt>;\r\n\r\n  getStakingTransaction(transactionHash: string): Promise<StakingTransactionResponse>;\r\n\r\n  getCirculatingSupply(): Promise<BigNumber>;\r\n  getTotalSupply(): Promise<BigNumber>;\r\n\r\n  getEpoch(): Promise<number>;\r\n  getEpochLastBlock(epoch: number): Promise<number>;\r\n\r\n  getLeader(): Promise<string>;\r\n\r\n  getValidatorsAddresses(): Promise<Array<string>>;\r\n  getActiveValidatorsAddresses(): Promise<Array<string>>;\r\n\r\n  getDelegationsByValidator(validatorAddress: string): Promise<Array<Delegation>>;\r\n  getDelegationsByDelegator(delegatorAddress: string): Promise<Array<Delegation>>;\r\n}\r\n\r\ninterface ShardStructure {\r\n  current: boolean;\r\n  http: string;\r\n  shardID: number;\r\n  ws: string;\r\n}\r\n\r\ninterface HarmonyNetwork extends Network {\r\n  shardID: number;\r\n  shardingStructure?: ShardStructure[];\r\n}\r\n\r\nexport type Networkish = HarmonyNetwork | number;\r\n\r\nconst networks = [\r\n  {\r\n    name: \"mainnet\",\r\n    chainId: 1,\r\n  },\r\n  {\r\n    name: \"testnet\",\r\n    chainId: 2,\r\n  },\r\n  {\r\n    name: \"localnet\",\r\n    chainId: 3,\r\n  },\r\n];\r\n\r\nexport class ApiHarmonyProvider extends JsonRpcProvider implements HarmonyProvider {\r\n  static getNetwork(network: Networkish, shardingStructure?: ShardStructure[]): HarmonyNetwork {\r\n    if (typeof network === \"number\") {\r\n      let shardID = shardingStructure?.find((shard) => shard.current)?.shardID ?? 0;\r\n\r\n      const { name } = networks.find(({ chainId }) => chainId === network) ?? { name: \"unknown\" };\r\n      return {\r\n        shardID,\r\n        name,\r\n        chainId: network,\r\n      };\r\n    }\r\n\r\n    return network;\r\n  }\r\n\r\n  static getFormatter(): HarmonyFormatter {\r\n    return new HarmonyFormatter();\r\n  }\r\n\r\n  formatter!: HarmonyFormatter;\r\n\r\n  _networkPromise!: Promise<HarmonyNetwork>;\r\n  _network!: HarmonyNetwork;\r\n\r\n  _shardingStructure?: ShardStructure[]; // cache\r\n\r\n  constructor(url?: ConnectionInfo | string) {\r\n    super(url);\r\n    this._nextId = randomBytes(1).readUInt8();\r\n  }\r\n\r\n  get network(): HarmonyNetwork {\r\n    return this._network;\r\n  }\r\n\r\n  async detectNetwork(): Promise<HarmonyNetwork> {\r\n    await timer(0);\r\n\r\n    let chainId = null;\r\n    try {\r\n      chainId = await this.send(\"hmy_chainId\", []);\r\n    } catch (error) {\r\n      try {\r\n        chainId = await this.send(\"net_version\", []);\r\n      } catch (error) {}\r\n    }\r\n\r\n    // this is used to dectec the current shard\r\n    // maybe this could be inferred from network Id last digit\r\n    let shardingStructure = this._shardingStructure;\r\n    if (!shardingStructure) {\r\n      try {\r\n        shardingStructure = await this.send(\"hmy_getShardingStructure\", []);\r\n      } catch (error) {}\r\n    }\r\n\r\n    if (chainId != null) {\r\n      const getNetwork = getStatic<(network: Networkish, shardingStructure?: ShardStructure[]) => HarmonyNetwork>(\r\n        this.constructor,\r\n        \"getNetwork\"\r\n      );\r\n      try {\r\n        return getNetwork(BigNumber.from(chainId).toNumber(), shardingStructure);\r\n      } catch (error) {\r\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\r\n          chainId: chainId,\r\n          event: \"invalidNetwork\",\r\n          serverError: error,\r\n        });\r\n      }\r\n    }\r\n\r\n    return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\r\n      event: \"noNetwork\",\r\n    });\r\n  }\r\n\r\n  async getCirculatingSupply(): Promise<BigNumber> {\r\n    return parseEther(await this.send(\"hmy_getCirculatingSupply\", []));\r\n  }\r\n\r\n  async getTotalSupply(): Promise<BigNumber> {\r\n    return parseEther(await this.send(\"hmy_getTotalSupply\", []));\r\n  }\r\n\r\n  async getEpoch(): Promise<number> {\r\n    return this.formatter.number(await this.send(\"hmy_getEpoch\", []));\r\n  }\r\n\r\n  async getEpochLastBlock(epoch: number): Promise<number> {\r\n    return this.formatter.number(await this.send(\"hmy_epochLastBlock\", [epoch]));\r\n  }\r\n\r\n  async getLeader(): Promise<string> {\r\n    return this.formatter.address(await this.send(\"hmy_getLeader\", []));\r\n  }\r\n\r\n  async getValidatorsAddresses(): Promise<Array<string>> {\r\n    const validators = await this.send(\"hmy_getAllValidatorAddresses\", []);\r\n    return validators.map((address: string) => this.formatter.address(address));\r\n  }\r\n\r\n  async getActiveValidatorsAddresses(): Promise<Array<string>> {\r\n    const validators = await this.send(\"hmy_getActiveValidatorAddresses\", []);\r\n    return validators.map((address: string) => this.formatter.address(address));\r\n  }\r\n\r\n  async getDelegationsByValidator(validatorAddress: string): Promise<Array<Delegation>> {\r\n    const result = await this.send(\"hmy_getDelegationsByValidator\", [validatorAddress]);\r\n    return result.map((delegation: string) => this.formatter.delegation(delegation));\r\n  }\r\n\r\n  async getDelegationsByDelegator(delegatorAddress: string): Promise<Array<Delegation>> {\r\n    const result = await this.send(\"hmy_getDelegationsByDelegator\", [delegatorAddress]);\r\n    return result.map((delegation: string) => this.formatter.delegation(delegation));\r\n  }\r\n\r\n  _wrapTransaction(tx: Transaction, hash?: string): TransactionResponse {\r\n    return <TransactionResponse>super._wrapTransaction(tx, hash);\r\n  }\r\n\r\n  _wrapStakingTransaction(tx: StakingTransaction, hash?: string): StakingTransactionResponse {\r\n    const response = <StakingTransactionResponse>tx;\r\n    response.hash = hash || '';\r\n    return response;\r\n  }\r\n\r\n  async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\r\n    await this.getNetwork();\r\n\r\n    const hexTx = hexlify(await Promise.resolve(signedTransaction));\r\n    const tx = this.formatter.transaction(signedTransaction);\r\n\r\n    try {\r\n      const hash = await this.perform(\"sendTransaction\", {\r\n        signedTransaction: hexTx,\r\n      });\r\n\r\n      return this._wrapTransaction(tx, hash);\r\n    } catch (error) {\r\n      (<any>error).transaction = tx;\r\n      (<any>error).transactionHash = tx.hash;\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async sendStakingTransaction(signedTransaction: string | Promise<string>): Promise<StakingTransactionResponse> {\r\n    await this.getNetwork();\r\n\r\n    const hexTx = hexlify(await Promise.resolve(signedTransaction));\r\n    const tx = this.formatter.stakingTransaction(signedTransaction);\r\n\r\n    try {\r\n      const hash = await this.perform(\"sendStackingTransaction\", {\r\n        signedTransaction: hexTx,\r\n      });\r\n\r\n      return this._wrapStakingTransaction(tx, hash);\r\n    } catch (error) {\r\n      (<any>error).transaction = tx;\r\n      (<any>error).transactionHash = tx.hash;\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  prepareRequest(method: string, params: any): [string, Array<any>] {\r\n    switch (method) {\r\n      case \"sendStackingTransaction\":\r\n        return [\"hmy_sendRawStakingTransaction\", [params.signedTransaction]];\r\n      case \"getStakingTransaction\":\r\n        return [\"hmy_getStakingTransactionByHash\", [params.transactionHash]];\r\n      case \"getCXTransactionReceipt\":\r\n        return [\"hmy_getCXReceiptByHash\", [params.transactionHash]];\r\n      default:\r\n        let [rpcMethod, rpcParams] = super.prepareRequest(method, params);\r\n\r\n        if (rpcMethod.startsWith(\"eth\")) {\r\n          rpcMethod = rpcMethod.replace(\"eth\", \"hmy\");\r\n        }\r\n\r\n        return [rpcMethod, rpcParams];\r\n    }\r\n  }\r\n\r\n  async _getBlock(\r\n    blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>,\r\n    includeTransactions?: boolean\r\n  ): Promise<Block | BlockWithTransactions> {\r\n    const block = (await super._getBlock(blockHashOrBlockTag, includeTransactions)) as Block | BlockWithTransactions;\r\n\r\n    block.shardID = this.network.shardID;\r\n\r\n    if (includeTransactions) {\r\n      let blockNumber: number | null = null;\r\n      for (let i = 0; i < (<BlockWithTransactions>block).stakingTransactions.length; i++) {\r\n        const tx = (<BlockWithTransactions>block).stakingTransactions[i];\r\n        if (tx.blockNumber == null) {\r\n          tx.confirmations = 0;\r\n        } else if (tx.confirmations == null) {\r\n          if (blockNumber == null) {\r\n            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\r\n          }\r\n\r\n          // Add the confirmations using the fast block number (pessimistic)\r\n          let confirmations = blockNumber - tx.blockNumber + 1;\r\n          if (confirmations <= 0) {\r\n            confirmations = 1;\r\n          }\r\n          tx.confirmations = confirmations;\r\n        }\r\n      }\r\n    }\r\n\r\n    return block;\r\n  }\r\n\r\n  getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\r\n    return <Promise<Block>>this._getBlock(blockHashOrBlockTag, false);\r\n  }\r\n\r\n  getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\r\n    return <Promise<BlockWithTransactions>>this._getBlock(blockHashOrBlockTag, true);\r\n  }\r\n\r\n  getTransaction(transactionHash: string): Promise<TransactionResponse> {\r\n    return <Promise<TransactionResponse>>super.getTransaction(transactionHash);\r\n  }\r\n\r\n  async getStakingTransaction(transactionHash: string): Promise<StakingTransactionResponse> {\r\n    await this.getNetwork();\r\n    transactionHash = await transactionHash;\r\n\r\n    const params = { transactionHash: this.formatter.hash(transactionHash, true) };\r\n\r\n    return poll(\r\n      async () => {\r\n        const result = await this.perform(\"getStakingTransaction\", params);\r\n\r\n        const tx = this.formatter.stakingTransactionResponse(result);\r\n\r\n        if (tx.blockNumber == null) {\r\n          tx.confirmations = 0;\r\n        } else if (tx.confirmations == null) {\r\n          const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\r\n\r\n          // Add the confirmations using the fast block number (pessimistic)\r\n          let confirmations = blockNumber - tx.blockNumber + 1;\r\n          if (confirmations <= 0) {\r\n            confirmations = 1;\r\n          }\r\n          tx.confirmations = confirmations;\r\n        }\r\n\r\n        return this._wrapStakingTransaction(tx);\r\n      },\r\n      { oncePoll: this }\r\n    );\r\n  }\r\n\r\n  async getCXTransactionReceipt(transactionHash: string): Promise<CXTransactionReceipt> {\r\n    await this.getNetwork();\r\n    const params = { transactionHash: this.formatter.hash(transactionHash, true) };\r\n    return poll(\r\n      async () => {\r\n        const result = await this.perform(\"getCXTransactionReceipt\", params);\r\n        return this.formatter.cXReceipt(result);\r\n      },\r\n      { oncePoll: this }\r\n    );\r\n  }\r\n}\r\n"],"names":["Directive","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","isBech32Address","raw","match","isBech32TestNetAddress","HarmonyAddress","basic","getBasic","isValidBasic","str","toTest","isValidChecksum","checksum","isValidBech32","bech32","isValidBech32TestNet","bech32TestNet","addr","isAddress","getHexAddress","substring","decode","prefix","hexlify","fromWords","words","encode","toWords","arrayify","getAddress","address","logger","Logger","transactionFields","maxLength","numeric","allowedTransactionKeys","nonce","gasLimit","gasPrice","shardID","toShardID","to","data","chainId","formatNumber","stripZeros","BigNumber","from","toHexString","throwArgumentError","formatDecimal","parseUnits","formatDescription","Uint8Array","Buffer","identity","website","securityContact","details","formatComissionRates","rate","maxRate","maxChangeRate","formatMsg","CreateValidator","msg","validatorAddress","description","commissionRates","minSelfDelegation","maxTotalDelegation","slotPubKeys","map","slotKeySigs","_msg$slotKeySigs","sig","amount","EditValidator","commissionRate","slotKeyToRemove","slotKeyToAdd","slotKeySig","active","One","Two","Zero","Delegate","Undelegate","delegatorAddress","CollectRewards","serializeStakingTransaction","transaction","signature","encodeTransaction","fields","isBytesLike","v","Math","floor","RLP","splitSignature","recoveryParam","r","s","handleAddress","handleNumber","handleText","toString","handleValidatorDescription","handleValidatorCommissionRates","handleActive","status","eq","handleMsg","handleStakingTransaction","directive","toNumber","tx","hexZeroPad","isZero","digest","keccak256","recoverAddress","hash","handleTransaction","parseTransaction","payload","parseStakingTransaction","TRANSACTION_TYPES","HarmonyFormatter","_Formatter","getDefaultFormats","number","bind","bigNumber","decimal","transactionType","formats","accessList","transactionRequest","Formatter","allowNull","receipt","assign","block","epoch","viewID","mixHash","stakingTransactions","arrayOf","stakingTransaction","blockHash","blockNumber","transactionIndex","confirmations","uint256","blockWithTransactions","stakingTransactionResponse","cXReceipt","createValidatorMsg","createValidatorRequestMsg","shallowCopy","editValidatorMsg","slotPubKeyToAdd","slotPubKeyToRemove","editValidatorRequestMsg","delegateMsg","undelegateMsg","collectRewardsMsg","undelegation","delegation","reward","undelegations","check","Amount","Epoch","formatUnits","maxCommissionRate","_block","format","transactionResponse","gas","input","creates","contractAddress","replace","sender","validator_address","delegator_address","Undelegations","timer","timeout","setTimeout","networks","url","_nextId","randomBytes","readUInt8","getNetwork","network","shardingStructure","find","shard","current","_shardingStructure$fi2","getFormatter","detectNetwork","send","_shardingStructure","getStatic","throwError","errors","NETWORK_ERROR","event","serverError","getCirculatingSupply","parseEther","getTotalSupply","getEpoch","formatter","getEpochLastBlock","getLeader","getValidatorsAddresses","_this2","getActiveValidatorsAddresses","_this3","getDelegationsByValidator","_this4","getDelegationsByDelegator","_this5","_wrapTransaction","_wrapStakingTransaction","response","sendTransaction","signedTransaction","hexTx","perform","transactionHash","sendStakingTransaction","prepareRequest","params","rpcMethod","rpcParams","startsWith","_getBlock","blockHashOrBlockTag","includeTransactions","_getInternalBlockNumber","pollingInterval","getBlock","getBlockWithTransactions","getTransaction","getStakingTransaction","poll","_this6","oncePoll","getCXTransactionReceipt","_this7","_network","JsonRpcProvider","rawTransaction","Array","isArray","checkProperties","fieldInfo","options","hexPad","serializeTransaction"],"mappings":"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"}